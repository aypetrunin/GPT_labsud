## **üî∞ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è Whisper [ver.2 Google Colab] 08-09-2023**
#!ls -ahl
#@markdown –ü—Ä–æ–≤—Ä–µ–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –≤–∏–¥–µ–æ-–∫–∞—Ä—Ç—ã (–Ω—É–∂–Ω–∞ T4 –∏–ª–∏ –≤—ã—à–µ)
#!nvidia-smi
#!nvidia-smi --query-gpu=name --format=csv,noheader,nounits

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ yt-dlp
#!pip install -q yt-dlp
# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Å—ã–ª–æ–∫
import re

def clean_youtube_url(url: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ª—é–±—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏ (https://youtu.be/ID_–í–ò–î–ï–û).

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        url (str): –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –Ω–∞ YouTube.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ None, –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É YouTube.

    –ü—Ä–∏–º–µ—Ä:
        >>> clean_youtube_url("https://www.youtube.com/watch?v=dQw4w9WgXcQ")
        "https://youtu.be/dQw4w9WgXcQ"
    """

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤–∏–¥–µ–æ YouTube:
    # 1. (?:https?:\/\/)? - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª (http –∏–ª–∏ https).
    # 2. (?:www\.)? - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å "www".
    # 3. (?:youtube\.com\/(?:watch\?v=|embed\/)|youtu\.be\/) - –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏ embed) –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ YouTube.
    # 4. ([a-zA-Z0-9_-]{11}) - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–µ–æ, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 11 —Å–∏–º–≤–æ–ª–æ–≤.
    pattern = r"(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:watch\?v=|embed\/)|youtu\.be\/)([a-zA-Z0-9_-]{11})"

    # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    match = re.search(pattern, url)
    if match:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–µ–æ
        video_id = match.group(1)
        return f"https://youtu.be/{video_id}"
    else:
        return None
# –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

urls_list = [

"https://www.youtube.com/watch?v=2E7OYulX9bY",
"https://www.youtube.com/watch?v=gWVWUl7m_Wg",
"https://www.youtube.com/watch?v=O6nEtTgXpDE",
"https://www.youtube.com/watch?v=zcP02DOPQ98",


]
# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ "–æ—á–∏—â–µ–Ω–Ω—ã—Ö" –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ YouTube.
# –í—Å–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã.
cleaned_urls = set(filter(None, map(clean_youtube_url, urls_list)))

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print(cleaned_urls)
# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ m4a (–∞—É–¥–∏–æ—Ñ–∞–π–ª) —Å YouTube –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—Ä–∏—é /content/videos/
import subprocess

def download_video(url: str) -> None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ —Å YouTube –≤ —Ñ–æ—Ä–º–∞—Ç–µ m4a (–∞—É–¥–∏–æ—Ñ–∞–π–ª) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /content/audios/.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        url (str): –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –Ω–∞ YouTube.

    –ü—Ä–∏–º–µ—Ä:
        >>> download_video("https://www.youtube.com/watch?v=dQw4w9WgXcQ")
        ...
    """

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è yt-dlp, –∫–æ—Ç–æ—Ä–∞—è:
    # 1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ü–∏—é "-x" –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ.
    # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ –≤ "m4a".
    # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
    cmd = [
        "yt-dlp",
        "-x",
        "--audio-format", "m4a",
        "-o", "/content/audios/%(title)s.%(ext)s",
        url
    ]

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π.
        # stdout=subprocess.PIPE –ø–æ–∑–≤–æ–ª—è–µ—Ç —á–∏—Ç–∞—Ç—å –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)

        # –ß—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –µ–≥–æ –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω.
        for line in process.stdout:
            print(line.strip())

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
        return_code = process.wait()

        # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–Ω–µ –Ω—É–ª–µ–≤–æ–π –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è), –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        if return_code != 0:
            raise subprocess.CalledProcessError(return_code, cmd)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {url}:")
        print(str(e))
# –ü–µ—Ä–µ–±–æ—Ä –∫–∞–∂–¥–æ–π –æ—á–∏—â–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ cleaned_urls.
# –î–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è download_video,
# –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∑–∏—Ç –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ m4a –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –µ–≥–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /content/audios/.
for url in cleaned_urls:
    download_video(url)
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ whisper
# !pip install -q git+https://github.com/openai/whisper.git
import os
from typing import List

def _construct_whisper_command(input_path: str, output_dir: str) -> List[str]:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã whisper.

    Args:
    - input_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É.
    - output_dir (str): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.

    Returns:
    - List[str]: –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã whisper.

    –ö–æ–º–∞–Ω–¥–∞ whisper –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π.
    –í –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã:
    1. `--model large-v2`: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–æ–ª—å—à–æ–π –º–æ–¥–µ–ª–∏ (–≤–µ—Ä—Å–∏–∏ 2) –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.
    2. `--language ru`: —É–∫–∞–∑–∞–Ω–∏–µ —è–∑—ã–∫–∞ —Ä–µ—á–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
    3. `--device cuda`: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (GPU) –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.
    4. `--output_format txt`: —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ.
    """
    return [
        'whisper',
        input_path,
        '--model', "large-v2",
        '--language', 'ru',
        '--device', 'cuda',
        '--output_format', 'all',
        '--output_dir', output_dir
    ]


def transcribe_audio_files(input_directory: str, output_directory: str) -> None:
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é whisper.

    Args:
    - input_directory (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏.
    - output_directory (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.

    –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ `input_directory` –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.
    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ `output_directory`, –≥–¥–µ –∫–∞–∂–¥–∞—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É.
    """

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –µ—ë —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .m4a
    files = [f for f in os.listdir(input_directory) if os.path.isfile(os.path.join(input_directory, f)) and f.endswith('.m4a')]

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞:
    for file in files:
        input_path = os.path.join(input_directory, file)

        # –ò–º—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        subdir_name = os.path.splitext(file)[0]
        subdir_path = os.path.join(output_directory, subdir_name)

        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ
        print(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {file}...")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è whisper
        cmd = _construct_whisper_command(input_path, subdir_path)

        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        with subprocess.Popen(cmd, stdout=subprocess.PIPE, text=True) as process:
            for line in iter(process.stdout.readline, ''):
                print(line, end='')  # –í—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            print(f"\n–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {file} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

transcribe_audio_files('/content/audios', '/content/out')
#!ls -ahl /content/audios
#!ls -ahl /content/out
#!zip -r /content/out.zip /content/out
from google.colab import files
files.download("/content/out.zip")

#import os

directory = '/content/out'
for filename in os.listdir(directory):
    f = os.path.join(directory, filename)
    if os.path.isfile(f):
        print(f)
#—Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –ë–î
os.mkdir("/content/out_txt2")
#–ü—Ä–æ–π–¥–µ–º—Å—è –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –∫–∞—Ç–∞–ª–æ–≥–∞ out –∏ –Ω–∞–π–¥–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
#–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
#1. –ò–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∑–∞–º–µ–Ω–∏–≤ —Å–∏–º–≤–æ–ª '|' –Ω–∞ —Ç–æ—á–∫—É)
#2. –î–æ–±–∞–≤–∏–º –∑–∞–ª–æ–≤–æ–∫ –≤ –Ω–∞—á–∞–ª–æ, –æ—Ñ–æ—Ä–º–∏–≤ –≤ "#"
#3. –ò–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —É–±–µ—Ä—É —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫ (–≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ü–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å)
directory = '/content/out'
directory_final = '/content/out_txt'

for root, dirs, files in os.walk(directory):
    for file in files:
        if file.endswith('.txt'):
             TextHeader = file.replace( " ÔΩú ", '. ')

             with open (os.path.join(root, file )  , 'r') as f:
                old_data = f.read()
             #print(old_data)
             #new_data = f"#{TextHeader}#\n {old_data}"
             #print(new_data)
             print(f"{directory_final}/{file}")
             with open (f"{directory_final}/{file}" , 'w') as f:
                f.write(f"#{file.replace( ' ÔΩú ', '. ')}#\n{old_data}" )



#!zip -r /content/out_txt.zip /content/out_txt
from google.colab import files
files.download("/content/out_txt.zip")
#–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –æ–¥–∏–Ω
import fileinput, glob, os

# –∫–∞—Ç–∞–ª–æ–≥ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
path = '/content/out_txt'
# –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
pattern = '*.txt'

glob_path = os.path.join(path, pattern)
list_files = glob.glob(glob_path)
# —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–º –∫–∞–∫ '.all'
new_file = '/content/video_database.txt'

if list_files:
    # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ 'list_files' –Ω–∞ —á—Ç–µ–Ω–∏–µ
    # –∏ –Ω–æ–≤—ã–π –æ–±—â–∏–π —Ñ–∞–π–ª 'new_file' –Ω–∞ –∑–∞–ø–∏—Å—å
    with fileinput.FileInput(files=list_files) as fr, open(new_file, 'w') as fw:
        # —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        for line in fr:
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            if fr.isfirstline():
                # –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
                file_name = fr.filename()
                # –¥–æ–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞
                #fw.write(f'\n {file_name}\n')
                fw.write(f'\n')
            # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ç–æ –∑–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É 'line'
            # –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ–±—â–∏–π —Ñ–∞–π–ª
            #fw.write(line)
            fw.write(f"{line.replace( '.txt', '. ')}")
